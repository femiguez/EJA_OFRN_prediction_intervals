geom_text(aes(x = 0.15, y = -3),
label = "orange = lmer-boot", color = "orange") +
geom_text(aes(x = 0.17, y = 5),
label = "blue = BLUPs (identical)", color = "blue") +
ggtitle("Stratego YLD on Soybean,
between.trial variance = 0,
BLUPs = identical (blue)")
set.seed(12345)
## Default priors, this is a bad idea!
sfs.mcmc1 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
pr = TRUE, verbose = FALSE)
sfs.mcmc2 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
pr = TRUE, verbose = FALSE)
sfs.mcmc3 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
pr = TRUE, verbose = FALSE)
sfs.mcmc.v <- mcmc.list(sfs.mcmc1$VCV, sfs.mcmc2$VCV, sfs.mcmc3$VCV)
sfs.mcmc.m <- mcmc.list(sfs.mcmc1$Sol, sfs.mcmc2$Sol, sfs.mcmc3$Sol)
gelman.diag(sfs.mcmc.v)
plot(sfs.mcmc.v, density = FALSE)
set.seed(123456789)
prior1 <- list(R = list(V = 1, nu = 0.001), G = list(G1=list(V = 1, nu = 0.001)))
## These are 'non-informative' priors
sfs.mcmc1.2 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
prior = prior1, pr = TRUE, verbose = FALSE)
sfs.mcmc2.2 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
prior = prior1, pr = TRUE, verbose = FALSE)
sfs.mcmc3.2 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
prior = prior1, pr = TRUE, verbose = FALSE)
sfs.mcmc.v2 <- mcmc.list(sfs.mcmc1.2$VCV, sfs.mcmc2.2$VCV, sfs.mcmc3.2$VCV)
sfs.mcmc.m2 <- mcmc.list(sfs.mcmc1.2$Sol, sfs.mcmc2.2$Sol, sfs.mcmc3.2$Sol)
gelman.diag(sfs.mcmc.v2)
plot(sfs.mcmc.v2, density = FALSE)
set.seed(123456)
prior2 <- list(R = list(V = 0.0013978, nu = 1.492583),
G = list(G1=list(V = 0.0013978*diag(1), nu = 0.492583)))
## These are 'non-informative' priors
sfs.mcmc1.3 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
prior = prior2, pr = TRUE, verbose = FALSE)
sfs.mcmc2.3 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
prior = prior2, pr = TRUE, verbose = FALSE)
sfs.mcmc3.3 <- MCMCglmm(lrr ~ 1, random = ~Trial_ID, data = sfs,
prior = prior2, pr = TRUE, verbose = FALSE)
sfs.mcmc.v3 <- mcmc.list(sfs.mcmc1.3$VCV, sfs.mcmc2.3$VCV, sfs.mcmc3.3$VCV)
sfs.mcmc.m3 <- mcmc.list(sfs.mcmc1.3$Sol, sfs.mcmc2.3$Sol, sfs.mcmc3.3$Sol)
gelman.diag(sfs.mcmc.v3)
plot(sfs.mcmc.v3, density = FALSE)
## Calculate prediction intervals based on sfs.mcmc3.2
sfs.pdi.1 <- pred_int(sfs.mcmc3.2, method = "tdist")
sfs.pdi.2 <- pred_int(sfs.mcmc3.2, method = "mcmc")
sfs.pdi.3 <- pred_int(sfs.mcmc3.2, method = "simulate")
sfs.pdi.4 <- pred_int(sfs.mcmc3.2, method = "predict")
sfs.pdi.5 <- pred_int_mcg(sfs) ## Method 'ntrial'
sfs.pdi.6 <- pred_int(sfs$lrr, method = "tdist")
ggplot(data = sfs.ao, aes(x = lrr, y = trial)) +
geom_point() + xlab("lrr") + xlim(c(-0.4,0.4)) +
geom_vline(xintercept = coef(sfs.lmer)$Trial_ID[[1]][1],
color = "blue") +
geom_errorbarh(aes(xmin = min, xmax = max)) +
geom_vline(xintercept = 0) +
geom_point(aes(x = sfs.lmm.pi1[1], y = -1), color = "purple") +
geom_errorbarh(aes(xmin = sfs.lmm.pi1[2],
xmax = sfs.lmm.pi1[3],
y = -1),
color = "purple") +
geom_point(aes(x = sfs.lmm.pi2[1], y = -2), color = "orange") +
geom_errorbarh(aes(xmin = sfs.lmm.pi2[2],
xmax = sfs.lmm.pi2[3],
y = -2),
color = "orange") +
geom_point(aes(x = sfs.pdi.1[1], y = -3), color = "red") +
geom_errorbarh(aes(xmin = sfs.pdi.1[2],
xmax = sfs.pdi.1[3],
y = -3),
color = "red") +
geom_point(aes(x = sfs.pdi.2[1], y = -4), color = "chocolate4") +
geom_errorbarh(aes(xmin = sfs.pdi.2[2],
xmax = sfs.pdi.2[3],
y = -4),
color = "chocolate4") +
geom_point(aes(x = sfs.pdi.3[1], y = -5), color = "green4") +
geom_errorbarh(aes(xmin = sfs.pdi.3[2],
xmax = sfs.pdi.3[3],
y = -5),
color = "green4") +
geom_point(aes(x = sfs.pdi.4[1], y = -6), color = "purple") +
geom_errorbarh(aes(xmin = sfs.pdi.4[2],
xmax = sfs.pdi.4[3],
y = -6),
color = "purple") +
geom_point(aes(x = sfs.pdi.5[1], y = -7), color = "orange") +
geom_errorbarh(aes(xmin = sfs.pdi.5[2],
xmax = sfs.pdi.5[3],
y = -7),
color = "orange") +
geom_point(aes(x = sfs.pdi.6[1], y = -8), color = "green4") +
geom_errorbarh(aes(xmin = sfs.pdi.6[2],
xmax = sfs.pdi.6[3],
y = -8),
color = "green4") +
geom_text(aes(x = 0.22, y = 5),
label = "blue = BLUPs (identical)", color = "blue") +
geom_text(aes(x = 0.2, y = -1),
label = "purple = lmer-tdist", color = "purple") +
geom_text(aes(x = -0.2, y = -2),
label = "orange = lmer-boot", color = "orange") +
geom_text(aes(x = 0.2, y = -3),
label = "red = mcglm-tdist", color = "red") +
geom_text(aes(x = -0.23, y = -4),
label = "chocolate = mcglm-mcmc", color = "chocolate4") +
geom_text(aes(x = 0.3, y = -5),
label = "green = mcglm-simulate", color = "green4") +
geom_text(aes(x = -0.23, y = -6),
label = "purple = mcglm-predict", color = "purple") +
geom_text(aes(x = 0.3, y = -7),
label = "orange = mcglm-ntrial", color = "orange") +
geom_text(aes(x = -0.3, y = -8),
label = "green = lm-tdist", color = "green4") +
ggtitle("Stratego YLD on Soybean,
between.trial variance = 0,
BLUPs = identical (blue)")
sfs.pdi.7 <- pred_int(sfs.lmer, method = "tdist2")
sfs.lmer@Gp[2]
source('~/Dropbox/prediction/preds/pred_int_fun.R')
sfs.pdi.7 <- pred_int(sfs.lmer, method = "tdist2")
ggplot(data = sfs.ao, aes(x = lrr, y = trial)) +
geom_point() + xlab("lrr") + xlim(c(-0.4,0.4)) +
geom_vline(xintercept = coef(sfs.lmer)$Trial_ID[[1]][1],
color = "blue") +
geom_errorbarh(aes(xmin = min, xmax = max)) +
geom_vline(xintercept = 0) +
geom_point(aes(x = sfs.lmm.pi1[1], y = -1), color = "purple") +
geom_errorbarh(aes(xmin = sfs.lmm.pi1[2],
xmax = sfs.lmm.pi1[3],
y = -1),
color = "purple") +
geom_point(aes(x = sfs.lmm.pi2[1], y = -2), color = "orange") +
geom_errorbarh(aes(xmin = sfs.lmm.pi2[2],
xmax = sfs.lmm.pi2[3],
y = -2),
color = "orange") +
geom_point(aes(x = sfs.pdi.1[1], y = -3), color = "red") +
geom_errorbarh(aes(xmin = sfs.pdi.1[2],
xmax = sfs.pdi.1[3],
y = -3),
color = "red") +
geom_point(aes(x = sfs.pdi.2[1], y = -4), color = "chocolate4") +
geom_errorbarh(aes(xmin = sfs.pdi.2[2],
xmax = sfs.pdi.2[3],
y = -4),
color = "chocolate4") +
geom_point(aes(x = sfs.pdi.3[1], y = -5), color = "green4") +
geom_errorbarh(aes(xmin = sfs.pdi.3[2],
xmax = sfs.pdi.3[3],
y = -5),
color = "green4") +
geom_point(aes(x = sfs.pdi.4[1], y = -6), color = "purple") +
geom_errorbarh(aes(xmin = sfs.pdi.4[2],
xmax = sfs.pdi.4[3],
y = -6),
color = "purple") +
geom_point(aes(x = sfs.pdi.5[1], y = -7), color = "orange") +
geom_errorbarh(aes(xmin = sfs.pdi.5[2],
xmax = sfs.pdi.5[3],
y = -7),
color = "orange") +
geom_point(aes(x = sfs.pdi.6[1], y = -8), color = "green4") +
geom_errorbarh(aes(xmin = sfs.pdi.6[2],
xmax = sfs.pdi.6[3],
y = -8),
color = "green4") +
geom_point(aes(x = sfs.pdi.7[1], y = -9), color = "red") +
geom_errorbarh(aes(xmin = sfs.pdi.7[2],
xmax = sfs.pdi.7[3],
y = -9),
color = "red") +
geom_text(aes(x = 0.22, y = 5),
label = "blue = BLUPs (identical)", color = "blue") +
geom_text(aes(x = 0.2, y = -1),
label = "purple = lmer-tdist", color = "purple") +
geom_text(aes(x = -0.2, y = -2),
label = "orange = lmer-boot", color = "orange") +
geom_text(aes(x = 0.2, y = -3),
label = "red = mcglm-tdist", color = "red") +
geom_text(aes(x = -0.23, y = -4),
label = "chocolate = mcglm-mcmc", color = "chocolate4") +
geom_text(aes(x = 0.3, y = -5),
label = "green = mcglm-simulate", color = "green4") +
geom_text(aes(x = -0.23, y = -6),
label = "purple = mcglm-predict", color = "purple") +
geom_text(aes(x = 0.3, y = -7),
label = "orange = mcglm-ntrial", color = "orange") +
geom_text(aes(x = -0.3, y = -8),
label = "green = lm-tdist", color = "green4") +
geom_text(aes(x = 0.3, y = -9),
label = "red = lmer-tdist2", color = "red") +
ggtitle("Stratego YLD on Soybean,
between.trial variance = 0,
BLUPs = identical (blue)")
## What is the coverage of the 'ntrial' method
## How many trial means fall outside the 'ntrial' interval?
sfs.n.k <- nrow(sfs.a)
niint <- nrow(sfs.a[sfs.a$lrr > sfs.pdi.5[2] & sfs.a$lrr < sfs.pdi.5[3],])
niint/sfs.n.k
## How many trials fall outside the 'simualte' interval?
niint <- nrow(sfs.a[sfs.a$lrr > sfs.pdi.3[2] & sfs.a$lrr < sfs.pdi.3[3],])
niint/sfs.n.k
round(niint/sfs.n.k,3)
round(niint/sfs.n.k,3)
round(niint/sfs.n.k,3)
sfs.n.k <- nrow(sfs.a)
niint <- nrow(sfs.a[sfs.a$lrr > sfs.pdi.5[2] & sfs.a$lrr < sfs.pdi.5[3],])
round(niint/sfs.n.k,3)
## What is the coverage of the 'ntrial' method
## How many trial means fall outside the 'ntrial' interval?
sfs.n.k <- nrow(sfs.a)
niint <- nrow(sfs.a[sfs.a$lrr > sfs.pdi.5[2] & sfs.a$lrr < sfs.pdi.5[3],])
round(niint/sfs.n.k,3)
## How many trials fall outside the 'simualte' interval?
niint <- nrow(sfs.a[sfs.a$lrr > sfs.pdi.3[2] & sfs.a$lrr < sfs.pdi.3[3],])
niint/sfs.n.k
sfsd <- list(lrr = sfs$lrr, trial = sfs$Trial_ID,
t.n = length(unique(sfs$Trial_ID)),
n = nrow(sfs))
init <- list(mu = 0, tau = 0.01, tau.trial = 0.01)
modelstring="
model {
# Single intercept model likelihood
for (i in 1:n) {
lrr[i]~dnorm(mu + b[trial[i]],tau)
}
# trial effect
for(j in 1:t.n){
b[j] ~ dnorm(0, tau.trial)
}
# priors
mu ~ dnorm(0,0.00001) # intercept prior
tau ~ dgamma(0.0001,0.0001) ## tau is the residual precision
sigma <- 1.0/sqrt(tau)
tau.trial ~ dgamma(0.0001, 0.0001)
sigma.trial <- 1.0/sqrt(tau.trial)
# generate predictions
beff ~ dnorm(0, tau.trial)
pred <- mu + beff
}
"
mdl=jags.model(textConnection(modelstring), data=sfsd, inits=init,
n.chains = 2)
update(mdl,n.iter = 10000, n.burnin=5000)
output=coda.samples(model=mdl,
variable.names=c("mu","pred","sigma","sigma.trial"),
n.iter=20000, thin=10)
print(summary(output))
plot(output, trace = FALSE)
plot(output, density = FALSE)
cfs.lm <- c(coef(sfs.lm0), NA, sigma(sfs.lm))
cfs.lmer <- c(fixef(sfs.lmer), attr(VarCorr(sfs.lmer)$Trial_ID,"stddev"), sigma(sfs.lmer))
cfs.mcmc0 <- c(summary(sfs.mcmc.m)$statistics[1],
sqrt(summary(sfs.mcmc.v)$statistics[,1]))
cfs.mcmc2 <- c(summary(sfs.mcmc.m2)$statistics[1],
sqrt(summary(sfs.mcmc.v2)$statistics[,1]))
cfs.mcmc3 <- c(summary(sfs.mcmc.m3)$statistics[1],
sqrt(summary(sfs.mcmc.v3)$statistics[,1]))
cfs.rjags <- c(summary(output)$statistics[1], summary(output)$statistics[c(4,3),1])
resm <- matrix(rbind(cfs.lm,cfs.lmer, cfs.mcmc0,
cfs.mcmc2, cfs.mcmc3, cfs.rjags), nrow = 6, ncol = 3,
dimnames = list(c("lm","lmer","mcmc.nopriors","mcmc.s.priors",
"mcmc.p.priors","rjags"),
c("mu","sigma.trial","sigma")))
kable(round(resm,5), caption = "Sratego foliar fungicide")
funct <- c("lm","lmer","MCMCglmm","jags")
ccid <- data.frame(funct = funct, mu = NA, lwr = NA, upr = NA)
## values for lm
ccid[1,2:4] <- predict(sfs.lm0, interval = "confidence")[1,]
## values for lmer
ccid[2,2:4] <- c(fixef(sfs.lmer),
suppressWarnings(confint(sfs.lmer,
parm = "(Intercept)",
quiet = TRUE)[1,]))
## Values for MCMCglmm 2 - confidence
ccid[3,2:4] <- predict(sfs.mcmc3.3, interval = "confidence")[1,]
## jags confidence intervals
ccid[4,2:4] <- summary(output)[[2]][1,c(3,1,5)]
kable(cbind(ccid[,"funct"],round(ccid[,2:4],4)),
caption = "Comparing confidence intervals")
ggplot(data = ccid, aes(x = mu, y = funct)) + xlab("lrr") + ylab("function") +
geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.2) +
geom_point() + geom_vline(xintercept = 0)
funct <- rep(c("lm","lmer","MCMCglmm","jags"), c(1,2,5,1))
mthd <- c("tdist", "tdist","boot","tdist","mcmc","simulate",
"predict","ntrial", "mcmc")
cpid <- data.frame(funct = funct, method = mthd,
mu = NA, lwr = NA, upr = NA)
## values for lm
cpid[1,c(3:5)] <- pred_int(sfs$lrr) ## for object class numeric
## values for lmer
cpid[2,c(3:5)] <- pred_int(sfs.lmer, method = "tdist")
## lmer, method = "boot"
cpid[3,c(3:5)] <- pred_int(sfs.lmer, method = "boot")
## MCMCglmm, method = "tdist"
cpid[4,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "tdist")
## MCMCglmm, method = "mcmc"
cpid[5,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "mcmc")
## MCMCglmm, method = "simulate"
cpid[6,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "simulate")
## MCMCglmm, method = "predict"
cpid[7,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "predict")
## MCMCglmm, method = "ntrial"
cpid[8,c(3:5)] <- pred_int_mcg(sfs)$pdi
funct <- rep(c("lm","lmer","MCMCglmm","jags"), c(1,2,5,1))
mthd <- c("tdist", "tdist","boot","tdist","mcmc","simulate",
"predict","ntrial", "mcmc")
cpid <- data.frame(funct = funct, method = mthd,
mu = NA, lwr = NA, upr = NA)
## values for lm
cpid[1,c(3:5)] <- pred_int(sfs$lrr) ## for object class numeric
## values for lmer
cpid[2,c(3:5)] <- pred_int(sfs.lmer, method = "tdist")
## lmer, method = "boot"
cpid[3,c(3:5)] <- pred_int(sfs.lmer, method = "boot")
## MCMCglmm, method = "tdist"
cpid[4,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "tdist")
## MCMCglmm, method = "mcmc"
cpid[5,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "mcmc")
## MCMCglmm, method = "simulate"
cpid[6,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "simulate")
## MCMCglmm, method = "predict"
cpid[7,c(3:5)] <- pred_int(sfs.mcmc3.3, method = "predict")
## MCMCglmm, method = "ntrial"
cpid[8,c(3:5)] <- pred_int_mcg(sfs)
## jags, method = "mcmc"
cpid[9,c(3:5)] <- summary(output)[[2]][2,c(3,1,5)]
kable(cbind(cpid[,1:2],round(cpid[,3:5],4)),
caption = "Comparing prediction intervals")
ggplot(data = cpid, aes(x = mu, y = funct:method)) + xlab("lrr") + ylab("method") +
geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.2) +
geom_point() + geom_vline(xintercept = 0)
set.seed(123456)
btv <- seq(0.001, 0.07, length.out = 40)
btv.n <- length(btv)
wtv <- 0.05
rrm <- 1.10 ## response ratio mean
n.k <- 100 ## trials number
n <- 5 ## trial sample size
N <- n * n.k ## total number of observations
trials <- paste("T",1:n.k,sep="")
dats <- data.frame(i = rep(1:btv.n, each = N),
btv = rep(btv, each = N),
Trial_ID = rep(rep(trials, each = n), btv.n),
rep = rep(rep(1:n,n.k), btv.n), lrr=NA)
for(i in 1:btv.n){
## Generate the study means for this level of btv
sm <- rrm + rnorm(n.k, 0, sqrt(btv[i])) ## I fix mu at rrm
sm2 <- rep(sm, each = n)
err <- replicate(n.k,
scale(rnorm(n,0,sqrt(wtv)),
scale=FALSE))
yvals <- sm2 + c(err)
ii <- (i-1) * N + 1
iii <- i * N
dats[ii:iii,5] <- yvals
}
## Loop through datasets
## Data for result collection
mthds <- c("lm","lmer-tdist","lmer-tdist2","mcglm-tdist",
"mcglm-mcmc","mcglm-simulate","lmer-predict",
"mcglm-ntrial")
rcd <- expand.grid(method = mthds, btv = unique(btv))
rcd$hr <- rcd$btv / wtv
rcd$fit <- NA
rcd$lwr <- NA
rcd$upr <- NA
rcd$cvrg <- NA
for(j in 1:btv.n){
## Extract a dataset
datfra <- subset(dats, i == j)
## simple method
s.lm <- pred_int(datfra$lrr)
## Fit lmer
s.lmm <- lmer(lrr ~ 1 + (1|Trial_ID), data = datfra)
## prediciton intervals for lmer
s.lmm.pi1 <- pred_int(s.lmm, method = "tdist")
s.lmm.pi2 <- pred_int(s.lmm, method = "tdist2")
## Priors
prior1 <- list(B = list(mu = 0, V = 10),
G = list(G1 = list(V = 1, nu = 0.002)),
R = list(V = 1, nu = 0.002))
## Fit MCMCglmm
s.mc <- MCMCglmm(lrr ~ 1, random = ~ Trial_ID,
prior = prior1, pr = TRUE, nitt = 5e4, burnin = 5e3,
data = datfra, verbose = FALSE)
## Prediction intervals
s.mc.1 <- pred_int(s.mc, method = "tdist")
s.mc.2 <- pred_int(s.mc, method = "mcmc")
s.mc.3 <- pred_int(s.mc, method = "simulate")
s.mc.4 <- s.mc.3
s.mc.5 <- pred_int_mcg(datfra)
## Calculate coverage for out of sample
wt.err <- rnorm(nrow(datfra), 0, sqrt(wtv))
trial.eff <- rep(rnorm(n.k, rrm, sqrt(btv[j])), each = n)
new.lrr <- trial.eff + wt.err
new.dat <- data.frame(trial = datfra$Trial_ID, lrr = new.lrr)
new.dat.a <- aggregate(lrr ~ trial, data = new.dat, FUN = mean)
## Calculate coverage
s.lm.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.lm[2] &
new.dat.a$lrr < s.lm[3],])/n.k
s.lmm1.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.lmm.pi1[2] &
new.dat.a$lrr < s.lmm.pi1[3],])/n.k
s.lmm2.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.lmm.pi2[2] &
new.dat.a$lrr < s.lmm.pi2[3],])/n.k
s.mc1.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.mc.1[2] &
new.dat.a$lrr < s.mc.1[3],])/n.k
s.mc2.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.mc.2[2] &
new.dat.a$lrr < s.mc.2[3],])/n.k
s.mc3.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.mc.3[2] &
new.dat.a$lrr < s.mc.3[3],])/n.k
s.mc4.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.mc.4[2] &
new.dat.a$lrr < s.mc.4[3],])/n.k
s.mc5.cvrg <- nrow(new.dat.a[new.dat.a$lrr > s.mc.5[2] &
new.dat.a$lrr < s.mc.5[3],])/n.k
## Store results
## Collect results
res.col <- rbind(s.lm, s.lmm.pi1, s.lmm.pi2,
s.mc.1, s.mc.2, s.mc.3,
s.mc.4, s.mc.5)
res.cvrg <- rbind(s.lm.cvrg, s.lmm1.cvrg, s.lmm2.cvrg,
s.mc1.cvrg, s.mc2.cvrg, s.mc3.cvrg,
s.mc4.cvrg, s.mc5.cvrg)
indx0 <- c(j - 1)*length(mthds) + 1
indxf <- length(mthds) * j
indx <- c(indx0:indxf)
rcd[indx,4:6] <- res.col
rcd[indx,7] <- res.cvrg
}
rcd2 <- subset(rcd, method %in% c("lmer-tdist","lmer-tdist2",
"mcglm-simulate","mcglm-ntrial"))
ggplot(rcd2, aes(x = hr, y = fit)) +
geom_line() + ylab("lrr") +
geom_line(aes(x = hr, y = lwr, color = method)) +
geom_line(aes(x = hr, y = upr, color = method)) +
geom_hline(yintercept = 1.1) +
ggtitle("Bias")
## Prediciton interval coverage
ggplot(data = rcd2) + xlim(c(0,1.5)) +
geom_point(aes(x = hr, y = cvrg, color = method)) +
ylab("Coverage (0-1)") +
geom_hline(yintercept = 0.95) +
ggtitle("Prediction interval coverage")
## Prediciton interval coverage
ggplot(data = rcd2) + xlim(c(0,1.5)) +
geom_point(aes(x = hr, y = cvrg, color = method)) +
ylab("Coverage (0-1)") +
geom_hline(yintercept = 0.95) +
ggtitle("Prediction interval coverage")
ggplot(data = rcd2) + xlim(c(0,1.5)) +
geom_smooth(aes(x = hr, y = cvrg, color = method)) +
ylab("Coverage (0-1)") +
geom_hline(yintercept = 0.95) +
ggtitle("Prediction interval coverage (smooth)")
?geom_smooth
ggplot(data = rcd2) + xlim(c(0,1.5)) +
geom_smooth(aes(x = hr, y = cvrg, color = method),
method = "loess", se = FALSE) +
ylab("Coverage (0-1)") +
geom_hline(yintercept = 0.95) +
ggtitle("Prediction interval coverage (smooth)")
install.packages("rstanarm")
install.packages("rstanarm")
q()
sd(rnorm(5))
sd(rnorm(10))
sd(rnorm(100))
sd(rnorm(1000))
sd(rnorm(10000))
?gam
library(MASS)
?gam
?glm
library(gamm4)
?gamm
?gam
?splines
x <- c(105, 139, 187, 200, 200, 157, 119)
sum(x)
rm(list=ls())
library(nlraa)
2183 -2293
2188 - 2298
library(nlraa)
?SSlinp
require(ggplot2)
set.seed(123)
x <- 1:30
y <- linp(x, 0, 1, 20) + rnorm(30, 0, 0.5)
dat <- data.frame(x = x, y = y)
fit <- nls(y ~ SSlinp(x, a, b, xs), data = dat)
## plot
ggplot(data = dat, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(y = fitted(fit)))
## Confidence intervals
confint(fit)
install.packages("lmeresampler")
library(lmersampler)
library(lmeresampler)
help(package = "lmeresampler")
2256 - 2323
install.packages("saemix")
2274 - 2332
library(lme4)
?nlmer
?nlmerControl
setwd("~/Dropbox/Anabelle/paper hierarchical model/github_repo/EJA_OFRN_prediction_intervals/docs")
